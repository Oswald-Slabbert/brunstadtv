// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: tags.sql

package sqlc

import (
	"context"

	"github.com/lib/pq"
)

const getTags = `-- name: GetTags :many
SELECT code, date_created, date_updated, id, name, user_created, user_updated FROM tags WHERE id = ANY($1::int[])
`

func (q *Queries) GetTags(ctx context.Context, dollar_1 []int32) ([]Tag, error) {
	rows, err := q.db.QueryContext(ctx, getTags, pq.Array(dollar_1))
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Tag
	for rows.Next() {
		var i Tag
		if err := rows.Scan(
			&i.Code,
			&i.DateCreated,
			&i.DateUpdated,
			&i.ID,
			&i.Name,
			&i.UserCreated,
			&i.UserUpdated,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTags = `-- name: ListTags :many
SELECT code, date_created, date_updated, id, name, user_created, user_updated FROM tags
`

func (q *Queries) ListTags(ctx context.Context) ([]Tag, error) {
	rows, err := q.db.QueryContext(ctx, listTags)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Tag
	for rows.Next() {
		var i Tag
		if err := rows.Scan(
			&i.Code,
			&i.DateCreated,
			&i.DateUpdated,
			&i.ID,
			&i.Name,
			&i.UserCreated,
			&i.UserUpdated,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
