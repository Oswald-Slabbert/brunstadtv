// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: shows.sql

package sqlc

import (
	"context"

	"github.com/lib/pq"
)

const refreshShowAccessView = `-- name: RefreshShowAccessView :one
SELECT update_access('shows_access')
`

func (q *Queries) RefreshShowAccessView(ctx context.Context) (bool, error) {
	row := q.db.QueryRowContext(ctx, refreshShowAccessView)
	var update_access bool
	err := row.Scan(&update_access)
	return update_access, err
}

const getShows = `-- name: getShows :many
SELECT id, image_file_id, title, description, published, available_from, available_to, usergroups, download_groups, early_access_groups FROM shows_expanded WHERE id = ANY($1::int[])
`

func (q *Queries) getShows(ctx context.Context, dollar_1 []int32) ([]ShowsExpanded, error) {
	rows, err := q.db.QueryContext(ctx, getShows, pq.Array(dollar_1))
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ShowsExpanded
	for rows.Next() {
		var i ShowsExpanded
		if err := rows.Scan(
			&i.ID,
			&i.ImageFileID,
			&i.Title,
			&i.Description,
			&i.Published,
			&i.AvailableFrom,
			&i.AvailableTo,
			pq.Array(&i.Usergroups),
			pq.Array(&i.DownloadGroups),
			pq.Array(&i.EarlyAccessGroups),
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listShows = `-- name: listShows :many
SELECT id, image_file_id, title, description, published, available_from, available_to, usergroups, download_groups, early_access_groups FROM shows_expanded
`

func (q *Queries) listShows(ctx context.Context) ([]ShowsExpanded, error) {
	rows, err := q.db.QueryContext(ctx, listShows)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ShowsExpanded
	for rows.Next() {
		var i ShowsExpanded
		if err := rows.Scan(
			&i.ID,
			&i.ImageFileID,
			&i.Title,
			&i.Description,
			&i.Published,
			&i.AvailableFrom,
			&i.AvailableTo,
			pq.Array(&i.Usergroups),
			pq.Array(&i.DownloadGroups),
			pq.Array(&i.EarlyAccessGroups),
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
