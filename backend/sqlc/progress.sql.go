// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: progress.sql

package sqlc

import (
	"context"

	"github.com/google/uuid"
	"github.com/lib/pq"
	null_v4 "gopkg.in/guregu/null.v4"
)

const deleteProgress = `-- name: deleteProgress :exec
DELETE
FROM "users"."progress"
WHERE profile_id = $1::uuid
  AND episode_id = $2::int
`

type deleteProgressParams struct {
	Column1 uuid.UUID `db:"column_1" json:"column1"`
	Column2 int32     `db:"column_2" json:"column2"`
}

func (q *Queries) deleteProgress(ctx context.Context, arg deleteProgressParams) error {
	_, err := q.db.ExecContext(ctx, deleteProgress, arg.Column1, arg.Column2)
	return err
}

const getEpisodeIDsWithProgress = `-- name: getEpisodeIDsWithProgress :many
SELECT p.episode_id
FROM "users"."progress" p
WHERE p.profile_id = $1
  AND COALESCE((p.progress::float / NULLIF(p.duration, 0)) > 0.8, false) != true
ORDER BY p.updated_at DESC
`

func (q *Queries) getEpisodeIDsWithProgress(ctx context.Context, profileID uuid.UUID) ([]int32, error) {
	rows, err := q.db.QueryContext(ctx, getEpisodeIDsWithProgress, profileID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []int32
	for rows.Next() {
		var episode_id int32
		if err := rows.Scan(&episode_id); err != nil {
			return nil, err
		}
		items = append(items, episode_id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProgressForProfile = `-- name: getProgressForProfile :many
SELECT p.episode_id,
       p.show_id,
       p.progress,
       p.duration,
       COALESCE((p.progress::float / NULLIF(p.duration, 0)) > 0.8, false)::bool AS watched
FROM "users"."progress" p
WHERE p.profile_id = $1::uuid
  AND p.episode_id = ANY ($2::int[])
ORDER BY watched, p.updated_at DESC
`

type getProgressForProfileParams struct {
	Column1 uuid.UUID `db:"column_1" json:"column1"`
	Column2 []int32   `db:"column_2" json:"column2"`
}

type getProgressForProfileRow struct {
	EpisodeID int32       `db:"episode_id" json:"episodeID"`
	ShowID    null_v4.Int `db:"show_id" json:"showID"`
	Progress  int32       `db:"progress" json:"progress"`
	Duration  int32       `db:"duration" json:"duration"`
	Watched   bool        `db:"watched" json:"watched"`
}

func (q *Queries) getProgressForProfile(ctx context.Context, arg getProgressForProfileParams) ([]getProgressForProfileRow, error) {
	rows, err := q.db.QueryContext(ctx, getProgressForProfile, arg.Column1, pq.Array(arg.Column2))
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []getProgressForProfileRow
	for rows.Next() {
		var i getProgressForProfileRow
		if err := rows.Scan(
			&i.EpisodeID,
			&i.ShowID,
			&i.Progress,
			&i.Duration,
			&i.Watched,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const saveProgress = `-- name: saveProgress :exec
INSERT INTO "users"."progress" (profile_id, episode_id, show_id, progress, duration, updated_at)
VALUES ($1, $2, $3, $4, $5, NOW())
ON CONFLICT (profile_id, episode_id) DO UPDATE SET progress = EXCLUDED.progress,
                                                   duration = EXCLUDED.duration
`

type saveProgressParams struct {
	ProfileID uuid.UUID   `db:"profile_id" json:"profileID"`
	EpisodeID int32       `db:"episode_id" json:"episodeID"`
	ShowID    null_v4.Int `db:"show_id" json:"showID"`
	Progress  int32       `db:"progress" json:"progress"`
	Duration  int32       `db:"duration" json:"duration"`
}

func (q *Queries) saveProgress(ctx context.Context, arg saveProgressParams) error {
	_, err := q.db.ExecContext(ctx, saveProgress,
		arg.ProfileID,
		arg.EpisodeID,
		arg.ShowID,
		arg.Progress,
		arg.Duration,
	)
	return err
}
