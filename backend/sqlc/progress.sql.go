// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: progress.sql

package sqlc

import (
	"context"
	"time"

	"github.com/google/uuid"
	"github.com/lib/pq"
)

const getProgressForProfile = `-- name: getProgressForProfile :many
SELECT episode_id, progress
FROM "users"."progress"
WHERE profile_id = $1::uuid
  AND episode_id = ANY ($2::int[])
`

type getProgressForProfileParams struct {
	Column1 uuid.UUID `db:"column_1" json:"column1"`
	Column2 []int32   `db:"column_2" json:"column2"`
}

type getProgressForProfileRow struct {
	EpisodeID int32     `db:"episode_id" json:"episodeID"`
	Progress  time.Time `db:"progress" json:"progress"`
}

func (q *Queries) getProgressForProfile(ctx context.Context, arg getProgressForProfileParams) ([]getProgressForProfileRow, error) {
	rows, err := q.db.QueryContext(ctx, getProgressForProfile, arg.Column1, pq.Array(arg.Column2))
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []getProgressForProfileRow
	for rows.Next() {
		var i getProgressForProfileRow
		if err := rows.Scan(&i.EpisodeID, &i.Progress); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
