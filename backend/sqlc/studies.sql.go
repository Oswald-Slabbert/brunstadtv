// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: studies.sql

package sqlc

import (
	"context"

	"github.com/google/uuid"
	"github.com/lib/pq"
	"github.com/tabbed/pqtype"
)

const getStudies = `-- name: getStudies :many
WITH ts AS (SELECT studytopics_id,
                   json_object_agg(languages_code, title) as title
            FROM studytopics_translations
            GROUP BY studytopics_id)
SELECT s.id,
       ts.title
FROM studytopics s
         LEFT JOIN ts ON ts.studytopics_id = s.id
WHERE s.status = 'published'
  AND s.id = ANY ($1::uuid[])
`

type getStudiesRow struct {
	ID    uuid.UUID             `db:"id" json:"id"`
	Title pqtype.NullRawMessage `db:"title" json:"title"`
}

func (q *Queries) getStudies(ctx context.Context, dollar_1 []uuid.UUID) ([]getStudiesRow, error) {
	rows, err := q.db.QueryContext(ctx, getStudies, pq.Array(dollar_1))
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []getStudiesRow
	for rows.Next() {
		var i getStudiesRow
		if err := rows.Scan(&i.ID, &i.Title); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTasks = `-- name: getTasks :many
SELECT
    t.id
FROM tasks t
WHERE t.status = 'published'
  AND t.id = ANY ($1::uuid[])
`

func (q *Queries) getTasks(ctx context.Context, dollar_1 []uuid.UUID) ([]uuid.UUID, error) {
	rows, err := q.db.QueryContext(ctx, getTasks, pq.Array(dollar_1))
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []uuid.UUID
	for rows.Next() {
		var id uuid.UUID
		if err := rows.Scan(&id); err != nil {
			return nil, err
		}
		items = append(items, id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
