// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: seasons.sql

package sqlc

import (
	"context"

	"github.com/lib/pq"
)

const refreshSeasonAccessView = `-- name: RefreshSeasonAccessView :one
SELECT update_access('seasons_access')
`

func (q *Queries) RefreshSeasonAccessView(ctx context.Context) (bool, error) {
	row := q.db.QueryRowContext(ctx, refreshSeasonAccessView)
	var update_access bool
	err := row.Scan(&update_access)
	return update_access, err
}

const getSeasons = `-- name: getSeasons :many
SELECT id, season_number, image_file_id, show_id, title, description, published, available_from, available_to, usergroups, download_groups, early_access_groups, legacy_id FROM seasons_expanded WHERE id = ANY($1::int[])
`

func (q *Queries) getSeasons(ctx context.Context, dollar_1 []int32) ([]SeasonsExpanded, error) {
	rows, err := q.db.QueryContext(ctx, getSeasons, pq.Array(dollar_1))
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SeasonsExpanded
	for rows.Next() {
		var i SeasonsExpanded
		if err := rows.Scan(
			&i.ID,
			&i.SeasonNumber,
			&i.ImageFileID,
			&i.ShowID,
			&i.Title,
			&i.Description,
			&i.Published,
			&i.AvailableFrom,
			&i.AvailableTo,
			pq.Array(&i.Usergroups),
			pq.Array(&i.DownloadGroups),
			pq.Array(&i.EarlyAccessGroups),
			&i.LegacyID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSeasonsForShows = `-- name: getSeasonsForShows :many
SELECT id, season_number, image_file_id, show_id, title, description, published, available_from, available_to, usergroups, download_groups, early_access_groups, legacy_id FROM seasons_expanded WHERE show_id = ANY($1::int[])
`

func (q *Queries) getSeasonsForShows(ctx context.Context, dollar_1 []int32) ([]SeasonsExpanded, error) {
	rows, err := q.db.QueryContext(ctx, getSeasonsForShows, pq.Array(dollar_1))
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SeasonsExpanded
	for rows.Next() {
		var i SeasonsExpanded
		if err := rows.Scan(
			&i.ID,
			&i.SeasonNumber,
			&i.ImageFileID,
			&i.ShowID,
			&i.Title,
			&i.Description,
			&i.Published,
			&i.AvailableFrom,
			&i.AvailableTo,
			pq.Array(&i.Usergroups),
			pq.Array(&i.DownloadGroups),
			pq.Array(&i.EarlyAccessGroups),
			&i.LegacyID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listSeasons = `-- name: listSeasons :many
SELECT id, season_number, image_file_id, show_id, title, description, published, available_from, available_to, usergroups, download_groups, early_access_groups, legacy_id FROM seasons_expanded
`

func (q *Queries) listSeasons(ctx context.Context) ([]SeasonsExpanded, error) {
	rows, err := q.db.QueryContext(ctx, listSeasons)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SeasonsExpanded
	for rows.Next() {
		var i SeasonsExpanded
		if err := rows.Scan(
			&i.ID,
			&i.SeasonNumber,
			&i.ImageFileID,
			&i.ShowID,
			&i.Title,
			&i.Description,
			&i.Published,
			&i.AvailableFrom,
			&i.AvailableTo,
			pq.Array(&i.Usergroups),
			pq.Array(&i.DownloadGroups),
			pq.Array(&i.EarlyAccessGroups),
			&i.LegacyID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
