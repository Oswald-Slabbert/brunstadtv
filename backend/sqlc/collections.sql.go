// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: collections.sql

package sqlc

import (
	"context"

	"github.com/lib/pq"
)

const getCollections = `-- name: GetCollections :many
SELECT id, collection, filter_type, page_ids, pages_query_filter, show_ids, shows_query_filter, season_ids, seasons_query_filter, episode_ids, episodes_query_filter FROM collections_expanded c WHERE c.id = ANY($1::int[])
`

func (q *Queries) GetCollections(ctx context.Context, dollar_1 []int32) ([]CollectionsExpanded, error) {
	rows, err := q.db.QueryContext(ctx, getCollections, pq.Array(dollar_1))
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []CollectionsExpanded
	for rows.Next() {
		var i CollectionsExpanded
		if err := rows.Scan(
			&i.ID,
			&i.Collection,
			&i.FilterType,
			&i.PageIds,
			&i.PagesQueryFilter,
			&i.ShowIds,
			&i.ShowsQueryFilter,
			&i.SeasonIds,
			&i.SeasonsQueryFilter,
			&i.EpisodeIds,
			&i.EpisodesQueryFilter,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listCollections = `-- name: ListCollections :many
SELECT id, collection, filter_type, page_ids, pages_query_filter, show_ids, shows_query_filter, season_ids, seasons_query_filter, episode_ids, episodes_query_filter FROM collections_expanded
`

func (q *Queries) ListCollections(ctx context.Context) ([]CollectionsExpanded, error) {
	rows, err := q.db.QueryContext(ctx, listCollections)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []CollectionsExpanded
	for rows.Next() {
		var i CollectionsExpanded
		if err := rows.Scan(
			&i.ID,
			&i.Collection,
			&i.FilterType,
			&i.PageIds,
			&i.PagesQueryFilter,
			&i.ShowIds,
			&i.ShowsQueryFilter,
			&i.SeasonIds,
			&i.SeasonsQueryFilter,
			&i.EpisodeIds,
			&i.EpisodesQueryFilter,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
