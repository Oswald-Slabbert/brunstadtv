// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: collections.sql

package sqlc

import (
	"context"

	"github.com/lib/pq"
)

const getCollectionItemsForCollections = `-- name: getCollectionItemsForCollections :many
SELECT id, sort, user_created, date_created, user_updated, date_updated, collection_id, page_id, show_id, season_id, episode_id, type FROM collections_items ci WHERE ci.collection_id = ANY($1::int[])
`

func (q *Queries) getCollectionItemsForCollections(ctx context.Context, dollar_1 []int32) ([]CollectionsItem, error) {
	rows, err := q.db.QueryContext(ctx, getCollectionItemsForCollections, pq.Array(dollar_1))
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []CollectionsItem
	for rows.Next() {
		var i CollectionsItem
		if err := rows.Scan(
			&i.ID,
			&i.Sort,
			&i.UserCreated,
			&i.DateCreated,
			&i.UserUpdated,
			&i.DateUpdated,
			&i.CollectionID,
			&i.PageID,
			&i.ShowID,
			&i.SeasonID,
			&i.EpisodeID,
			&i.Type,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCollections = `-- name: getCollections :many
SELECT date_created, date_updated, id, sort, user_created, user_updated, collection, shows_query_filter, seasons_query_filter, episodes_query_filter, name, filter_type, pages_query_filter FROM collections c WHERE c.id = ANY($1::int[])
`

func (q *Queries) getCollections(ctx context.Context, dollar_1 []int32) ([]Collection, error) {
	rows, err := q.db.QueryContext(ctx, getCollections, pq.Array(dollar_1))
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Collection
	for rows.Next() {
		var i Collection
		if err := rows.Scan(
			&i.DateCreated,
			&i.DateUpdated,
			&i.ID,
			&i.Sort,
			&i.UserCreated,
			&i.UserUpdated,
			&i.Collection,
			&i.ShowsQueryFilter,
			&i.SeasonsQueryFilter,
			&i.EpisodesQueryFilter,
			&i.Name,
			&i.FilterType,
			&i.PagesQueryFilter,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listCollections = `-- name: listCollections :many
SELECT date_created, date_updated, id, sort, user_created, user_updated, collection, shows_query_filter, seasons_query_filter, episodes_query_filter, name, filter_type, pages_query_filter FROM collections
`

func (q *Queries) listCollections(ctx context.Context) ([]Collection, error) {
	rows, err := q.db.QueryContext(ctx, listCollections)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Collection
	for rows.Next() {
		var i Collection
		if err := rows.Scan(
			&i.DateCreated,
			&i.DateUpdated,
			&i.ID,
			&i.Sort,
			&i.UserCreated,
			&i.UserUpdated,
			&i.Collection,
			&i.ShowsQueryFilter,
			&i.SeasonsQueryFilter,
			&i.EpisodesQueryFilter,
			&i.Name,
			&i.FilterType,
			&i.PagesQueryFilter,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
