// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: notifications.sql

package sqlc

import (
	"context"
	"encoding/json"

	"github.com/lib/pq"
)

const getNotifications = `-- name: getNotifications :many
WITH ts AS (SELECT notifications_id,
                   json_object_agg(languages_code, title)       AS title,
                   json_object_agg(languages_code, description) AS description,
                   json_object_agg(languages_code, image)       AS images
            FROM notifications_translations
            GROUP BY notifications_id)
SELECT id, status, ts.title, ts.description, ts.images
FROM notifications
         JOIN ts ON ts.notifications_id = id
WHERE id = ANY ($1::int[])
`

type getNotificationsRow struct {
	ID          int32           `db:"id" json:"id"`
	Status      string          `db:"status" json:"status"`
	Title       json.RawMessage `db:"title" json:"title"`
	Description json.RawMessage `db:"description" json:"description"`
	Images      json.RawMessage `db:"images" json:"images"`
}

func (q *Queries) getNotifications(ctx context.Context, dollar_1 []int32) ([]getNotificationsRow, error) {
	rows, err := q.db.QueryContext(ctx, getNotifications, pq.Array(dollar_1))
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []getNotificationsRow
	for rows.Next() {
		var i getNotificationsRow
		if err := rows.Scan(
			&i.ID,
			&i.Status,
			&i.Title,
			&i.Description,
			&i.Images,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
