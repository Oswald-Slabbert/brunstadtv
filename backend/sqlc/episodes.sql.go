// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: episodes.sql

package sqlc

import (
	"context"
	"encoding/json"
	"time"

	"github.com/google/uuid"
	"github.com/lib/pq"
	"github.com/tabbed/pqtype"
	null_v4 "gopkg.in/guregu/null.v4"
)

const getEpisode = `-- name: GetEpisode :one
SELECT agerating_code, asset_id, available_from, available_to, date_created, date_updated, episode_number, id, image_file_id, legacy_description_id, legacy_extra_description_id, legacy_id, legacy_program_id, legacy_tags_id, legacy_title_id, migration_data, publish_date, season_id, status, type, user_created, user_updated FROM public.episodes WHERE id = $1
`

func (q *Queries) GetEpisode(ctx context.Context, id int32) (Episode, error) {
	row := q.db.QueryRowContext(ctx, getEpisode, id)
	var i Episode
	err := row.Scan(
		&i.AgeratingCode,
		&i.AssetID,
		&i.AvailableFrom,
		&i.AvailableTo,
		&i.DateCreated,
		&i.DateUpdated,
		&i.EpisodeNumber,
		&i.ID,
		&i.ImageFileID,
		&i.LegacyDescriptionID,
		&i.LegacyExtraDescriptionID,
		&i.LegacyID,
		&i.LegacyProgramID,
		&i.LegacyTagsID,
		&i.LegacyTitleID,
		&i.MigrationData,
		&i.PublishDate,
		&i.SeasonID,
		&i.Status,
		&i.Type,
		&i.UserCreated,
		&i.UserUpdated,
	)
	return i, err
}

const getEpisodeRoles = `-- name: GetEpisodeRoles :many
SELECT episodes_id, id, type, usergroups_code, date_created, date_updated FROM public.episodes_usergroups
`

func (q *Queries) GetEpisodeRoles(ctx context.Context) ([]EpisodesUsergroup, error) {
	rows, err := q.db.QueryContext(ctx, getEpisodeRoles)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []EpisodesUsergroup
	for rows.Next() {
		var i EpisodesUsergroup
		if err := rows.Scan(
			&i.EpisodesID,
			&i.ID,
			&i.Type,
			&i.UsergroupsCode,
			&i.DateCreated,
			&i.DateUpdated,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getEpisodeTranslations = `-- name: GetEpisodeTranslations :many
SELECT description, episodes_id, extra_description, id, is_primary, languages_code, title FROM public.episodes_translations
`

func (q *Queries) GetEpisodeTranslations(ctx context.Context) ([]EpisodesTranslation, error) {
	rows, err := q.db.QueryContext(ctx, getEpisodeTranslations)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []EpisodesTranslation
	for rows.Next() {
		var i EpisodesTranslation
		if err := rows.Scan(
			&i.Description,
			&i.EpisodesID,
			&i.ExtraDescription,
			&i.ID,
			&i.IsPrimary,
			&i.LanguagesCode,
			&i.Title,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getEpisodes = `-- name: GetEpisodes :many
SELECT agerating_code, asset_id, available_from, available_to, date_created, date_updated, episode_number, id, image_file_id, legacy_description_id, legacy_extra_description_id, legacy_id, legacy_program_id, legacy_tags_id, legacy_title_id, migration_data, publish_date, season_id, status, type, user_created, user_updated FROM public.episodes
`

func (q *Queries) GetEpisodes(ctx context.Context) ([]Episode, error) {
	rows, err := q.db.QueryContext(ctx, getEpisodes)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Episode
	for rows.Next() {
		var i Episode
		if err := rows.Scan(
			&i.AgeratingCode,
			&i.AssetID,
			&i.AvailableFrom,
			&i.AvailableTo,
			&i.DateCreated,
			&i.DateUpdated,
			&i.EpisodeNumber,
			&i.ID,
			&i.ImageFileID,
			&i.LegacyDescriptionID,
			&i.LegacyExtraDescriptionID,
			&i.LegacyID,
			&i.LegacyProgramID,
			&i.LegacyTagsID,
			&i.LegacyTitleID,
			&i.MigrationData,
			&i.PublishDate,
			&i.SeasonID,
			&i.Status,
			&i.Type,
			&i.UserCreated,
			&i.UserUpdated,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getEpisodesWithTranslationsByID = `-- name: GetEpisodesWithTranslationsByID :many
WITH t AS (SELECT
	t.episodes_id,
	json_object_agg(t.languages_code, t.title) as title,
	json_object_agg(t.languages_code, t.description) as description,
	json_object_agg(t.languages_code, t.extra_description) as extra_description
FROM episodes_translations t
WHERE t.episodes_id = ANY($1::int[])
GROUP BY episodes_id)
SELECT agerating_code, asset_id, available_from, available_to, date_created, date_updated, episode_number, id, image_file_id, legacy_description_id, legacy_extra_description_id, legacy_id, legacy_program_id, legacy_tags_id, legacy_title_id, migration_data, publish_date, season_id, status, type, user_created, user_updated, episodes_id, title, description, extra_description FROM episodes e
JOIN t ON e.id = t.episodes_id
`

type GetEpisodesWithTranslationsByIDRow struct {
	AgeratingCode            null_v4.String        `db:"agerating_code" json:"ageratingCode"`
	AssetID                  null_v4.Int           `db:"asset_id" json:"assetID"`
	AvailableFrom            null_v4.Time          `db:"available_from" json:"availableFrom"`
	AvailableTo              null_v4.Time          `db:"available_to" json:"availableTo"`
	DateCreated              time.Time             `db:"date_created" json:"dateCreated"`
	DateUpdated              time.Time             `db:"date_updated" json:"dateUpdated"`
	EpisodeNumber            null_v4.Int           `db:"episode_number" json:"episodeNumber"`
	ID                       int32                 `db:"id" json:"id"`
	ImageFileID              uuid.NullUUID         `db:"image_file_id" json:"imageFileID"`
	LegacyDescriptionID      null_v4.Int           `db:"legacy_description_id" json:"legacyDescriptionID"`
	LegacyExtraDescriptionID null_v4.Int           `db:"legacy_extra_description_id" json:"legacyExtraDescriptionID"`
	LegacyID                 null_v4.Int           `db:"legacy_id" json:"legacyID"`
	LegacyProgramID          null_v4.Int           `db:"legacy_program_id" json:"legacyProgramID"`
	LegacyTagsID             null_v4.Int           `db:"legacy_tags_id" json:"legacyTagsID"`
	LegacyTitleID            null_v4.Int           `db:"legacy_title_id" json:"legacyTitleID"`
	MigrationData            pqtype.NullRawMessage `db:"migration_data" json:"migrationData"`
	PublishDate              time.Time             `db:"publish_date" json:"publishDate"`
	SeasonID                 null_v4.Int           `db:"season_id" json:"seasonID"`
	Status                   string                `db:"status" json:"status"`
	Type                     string                `db:"type" json:"type"`
	UserCreated              uuid.NullUUID         `db:"user_created" json:"userCreated"`
	UserUpdated              uuid.NullUUID         `db:"user_updated" json:"userUpdated"`
	EpisodesID               int32                 `db:"episodes_id" json:"episodesID"`
	Title                    json.RawMessage       `db:"title" json:"title"`
	Description              json.RawMessage       `db:"description" json:"description"`
	ExtraDescription         json.RawMessage       `db:"extra_description" json:"extraDescription"`
}

func (q *Queries) GetEpisodesWithTranslationsByID(ctx context.Context, dollar_1 []int32) ([]GetEpisodesWithTranslationsByIDRow, error) {
	rows, err := q.db.QueryContext(ctx, getEpisodesWithTranslationsByID, pq.Array(dollar_1))
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetEpisodesWithTranslationsByIDRow
	for rows.Next() {
		var i GetEpisodesWithTranslationsByIDRow
		if err := rows.Scan(
			&i.AgeratingCode,
			&i.AssetID,
			&i.AvailableFrom,
			&i.AvailableTo,
			&i.DateCreated,
			&i.DateUpdated,
			&i.EpisodeNumber,
			&i.ID,
			&i.ImageFileID,
			&i.LegacyDescriptionID,
			&i.LegacyExtraDescriptionID,
			&i.LegacyID,
			&i.LegacyProgramID,
			&i.LegacyTagsID,
			&i.LegacyTitleID,
			&i.MigrationData,
			&i.PublishDate,
			&i.SeasonID,
			&i.Status,
			&i.Type,
			&i.UserCreated,
			&i.UserUpdated,
			&i.EpisodesID,
			&i.Title,
			&i.Description,
			&i.ExtraDescription,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRolesForEpisode = `-- name: GetRolesForEpisode :many
SELECT usergroups_code FROM public.episodes_usergroups WHERE episodes_id = $1
`

func (q *Queries) GetRolesForEpisode(ctx context.Context, episodesID int32) ([]string, error) {
	rows, err := q.db.QueryContext(ctx, getRolesForEpisode, episodesID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var usergroups_code string
		if err := rows.Scan(&usergroups_code); err != nil {
			return nil, err
		}
		items = append(items, usergroups_code)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTranslationsForEpisode = `-- name: GetTranslationsForEpisode :many
SELECT description, episodes_id, extra_description, id, is_primary, languages_code, title FROM public.episodes_translations WHERE episodes_id = $1
`

func (q *Queries) GetTranslationsForEpisode(ctx context.Context, episodesID int32) ([]EpisodesTranslation, error) {
	rows, err := q.db.QueryContext(ctx, getTranslationsForEpisode, episodesID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []EpisodesTranslation
	for rows.Next() {
		var i EpisodesTranslation
		if err := rows.Scan(
			&i.Description,
			&i.EpisodesID,
			&i.ExtraDescription,
			&i.ID,
			&i.IsPrimary,
			&i.LanguagesCode,
			&i.Title,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getVisibilityForEpisode = `-- name: GetVisibilityForEpisode :one
SELECT id, status, publish_date, available_from, available_to, season_id FROM public.episodes WHERE id = $1
`

type GetVisibilityForEpisodeRow struct {
	ID            int32        `db:"id" json:"id"`
	Status        string       `db:"status" json:"status"`
	PublishDate   time.Time    `db:"publish_date" json:"publishDate"`
	AvailableFrom null_v4.Time `db:"available_from" json:"availableFrom"`
	AvailableTo   null_v4.Time `db:"available_to" json:"availableTo"`
	SeasonID      null_v4.Int  `db:"season_id" json:"seasonID"`
}

func (q *Queries) GetVisibilityForEpisode(ctx context.Context, id int32) (GetVisibilityForEpisodeRow, error) {
	row := q.db.QueryRowContext(ctx, getVisibilityForEpisode, id)
	var i GetVisibilityForEpisodeRow
	err := row.Scan(
		&i.ID,
		&i.Status,
		&i.PublishDate,
		&i.AvailableFrom,
		&i.AvailableTo,
		&i.SeasonID,
	)
	return i, err
}

const getVisibilityForEpisodes = `-- name: GetVisibilityForEpisodes :many
SELECT id, status, publish_date, available_from, available_to, season_id FROM public.episodes
`

type GetVisibilityForEpisodesRow struct {
	ID            int32        `db:"id" json:"id"`
	Status        string       `db:"status" json:"status"`
	PublishDate   time.Time    `db:"publish_date" json:"publishDate"`
	AvailableFrom null_v4.Time `db:"available_from" json:"availableFrom"`
	AvailableTo   null_v4.Time `db:"available_to" json:"availableTo"`
	SeasonID      null_v4.Int  `db:"season_id" json:"seasonID"`
}

func (q *Queries) GetVisibilityForEpisodes(ctx context.Context) ([]GetVisibilityForEpisodesRow, error) {
	rows, err := q.db.QueryContext(ctx, getVisibilityForEpisodes)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetVisibilityForEpisodesRow
	for rows.Next() {
		var i GetVisibilityForEpisodesRow
		if err := rows.Scan(
			&i.ID,
			&i.Status,
			&i.PublishDate,
			&i.AvailableFrom,
			&i.AvailableTo,
			&i.SeasonID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const refreshAccessView = `-- name: RefreshAccessView :one
SELECT update_episodes_access()
`

func (q *Queries) RefreshAccessView(ctx context.Context) (bool, error) {
	row := q.db.QueryRowContext(ctx, refreshAccessView)
	var update_episodes_access bool
	err := row.Scan(&update_episodes_access)
	return update_episodes_access, err
}
