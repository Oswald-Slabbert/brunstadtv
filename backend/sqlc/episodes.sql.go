// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: episodes.sql

package sqlc

import (
	"context"

	"github.com/lib/pq"
)

const refreshEpisodeAccessView = `-- name: RefreshEpisodeAccessView :one
SELECT update_access('episodes_access')
`

func (q *Queries) RefreshEpisodeAccessView(ctx context.Context) (bool, error) {
	row := q.db.QueryRowContext(ctx, refreshEpisodeAccessView)
	var update_access bool
	err := row.Scan(&update_access)
	return update_access, err
}

const getEpisodes = `-- name: getEpisodes :many
SELECT id, asset_id, episode_number, image_file_id, season_id, type, title, description, extra_description, published, available_from, available_to, usergroups, download_groups, early_access_groups, tag_ids, legacy_id FROM public.episodes_expanded WHERE id = ANY($1::int[])
`

func (q *Queries) getEpisodes(ctx context.Context, dollar_1 []int32) ([]EpisodesExpanded, error) {
	rows, err := q.db.QueryContext(ctx, getEpisodes, pq.Array(dollar_1))
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []EpisodesExpanded
	for rows.Next() {
		var i EpisodesExpanded
		if err := rows.Scan(
			&i.ID,
			&i.AssetID,
			&i.EpisodeNumber,
			&i.ImageFileID,
			&i.SeasonID,
			&i.Type,
			&i.Title,
			&i.Description,
			&i.ExtraDescription,
			&i.Published,
			&i.AvailableFrom,
			&i.AvailableTo,
			pq.Array(&i.Usergroups),
			pq.Array(&i.DownloadGroups),
			pq.Array(&i.EarlyAccessGroups),
			pq.Array(&i.TagIds),
			&i.LegacyID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getEpisodesForSeasons = `-- name: getEpisodesForSeasons :many
SELECT id, asset_id, episode_number, image_file_id, season_id, type, title, description, extra_description, published, available_from, available_to, usergroups, download_groups, early_access_groups, tag_ids, legacy_id FROM public.episodes_expanded WHERE season_id = ANY($1::int[])
`

func (q *Queries) getEpisodesForSeasons(ctx context.Context, dollar_1 []int32) ([]EpisodesExpanded, error) {
	rows, err := q.db.QueryContext(ctx, getEpisodesForSeasons, pq.Array(dollar_1))
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []EpisodesExpanded
	for rows.Next() {
		var i EpisodesExpanded
		if err := rows.Scan(
			&i.ID,
			&i.AssetID,
			&i.EpisodeNumber,
			&i.ImageFileID,
			&i.SeasonID,
			&i.Type,
			&i.Title,
			&i.Description,
			&i.ExtraDescription,
			&i.Published,
			&i.AvailableFrom,
			&i.AvailableTo,
			pq.Array(&i.Usergroups),
			pq.Array(&i.DownloadGroups),
			pq.Array(&i.EarlyAccessGroups),
			pq.Array(&i.TagIds),
			&i.LegacyID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listEpisodes = `-- name: listEpisodes :many
SELECT id, asset_id, episode_number, image_file_id, season_id, type, title, description, extra_description, published, available_from, available_to, usergroups, download_groups, early_access_groups, tag_ids, legacy_id FROM public.episodes_expanded
`

func (q *Queries) listEpisodes(ctx context.Context) ([]EpisodesExpanded, error) {
	rows, err := q.db.QueryContext(ctx, listEpisodes)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []EpisodesExpanded
	for rows.Next() {
		var i EpisodesExpanded
		if err := rows.Scan(
			&i.ID,
			&i.AssetID,
			&i.EpisodeNumber,
			&i.ImageFileID,
			&i.SeasonID,
			&i.Type,
			&i.Title,
			&i.Description,
			&i.ExtraDescription,
			&i.Published,
			&i.AvailableFrom,
			&i.AvailableTo,
			pq.Array(&i.Usergroups),
			pq.Array(&i.DownloadGroups),
			pq.Array(&i.EarlyAccessGroups),
			pq.Array(&i.TagIds),
			&i.LegacyID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
