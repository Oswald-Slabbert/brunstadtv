// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: sections.sql

package sqlc

import (
	"context"

	"github.com/lib/pq"
)

const getSections = `-- name: GetSections :many
SELECT id, page, type, published, date_created, date_updated, collection_id, title FROM sections_expanded s WHERE s.id = ANY($1::int[])
`

func (q *Queries) GetSections(ctx context.Context, dollar_1 []int32) ([]SectionsExpanded, error) {
	rows, err := q.db.QueryContext(ctx, getSections, pq.Array(dollar_1))
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SectionsExpanded
	for rows.Next() {
		var i SectionsExpanded
		if err := rows.Scan(
			&i.ID,
			&i.Page,
			&i.Type,
			&i.Published,
			&i.DateCreated,
			&i.DateUpdated,
			&i.CollectionID,
			&i.Title,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSectionsForPageIDs = `-- name: GetSectionsForPageIDs :many
SELECT id, page, type, published, date_created, date_updated, collection_id, title FROM sections_expanded s WHERE s.page = ANY($1::int[])
`

func (q *Queries) GetSectionsForPageIDs(ctx context.Context, dollar_1 []int32) ([]SectionsExpanded, error) {
	rows, err := q.db.QueryContext(ctx, getSectionsForPageIDs, pq.Array(dollar_1))
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SectionsExpanded
	for rows.Next() {
		var i SectionsExpanded
		if err := rows.Scan(
			&i.ID,
			&i.Page,
			&i.Type,
			&i.Published,
			&i.DateCreated,
			&i.DateUpdated,
			&i.CollectionID,
			&i.Title,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listSections = `-- name: ListSections :many
SELECT id, page, type, published, date_created, date_updated, collection_id, title FROM sections_expanded
`

func (q *Queries) ListSections(ctx context.Context) ([]SectionsExpanded, error) {
	rows, err := q.db.QueryContext(ctx, listSections)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SectionsExpanded
	for rows.Next() {
		var i SectionsExpanded
		if err := rows.Scan(
			&i.ID,
			&i.Page,
			&i.Type,
			&i.Published,
			&i.DateCreated,
			&i.DateUpdated,
			&i.CollectionID,
			&i.Title,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
